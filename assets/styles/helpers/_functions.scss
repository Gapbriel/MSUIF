/*
  =========================================

	  FUNCTIONS

	=========================================
*/

@import "../core/settings";

// -------------------------------------
//   Base
// -------------------------------------
// ----- Convert to EMs function ----- //
@function toem($target, $context: $msuif-font-size) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0em;
}

// ----- Convert to REMs function ----- //
@function torem($target, $context: $msuif-font-size) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0rem;
}

// ----- Remove unit from value ----- //
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

// ----- Recalculate responsive breakpoints ----- //
@function bp-calculation($breakpoint, $type){
  @if($type == "up") {@return $breakpoint + 1;}
  @elseif($type == "down") {@return $breakpoint - 1;}
}

// ----- Darken a color ----- //
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// ----- Lighten a color ----- //
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// ----- Explode a string in a PHP fashion ----- //
@function explode($string,$dem) {
  $list: ();
  $sum: str-length($string);

  @for $i from 1 through $sum {
    $str: str-index($string,$dem);

    @if str-length($string) >= 1 and $str == null {
      $list: append($list,$string,comma);
      $string: '';
    }

    @if type-of($str) == number {
      $each: str-slice($string,0,($str - 1));
      $list: append($list,$each,comma);
      $string: str-slice($string,($str + 1), $sum);
    }
  }

  @if length($list) > 1 {
    @return '.' + nth($list, 2);
  }
  @else {
    @return nth($list, 1);
  }
}
