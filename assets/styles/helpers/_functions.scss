////
/// Functions
/// @group Functions
/// @author Damian Muti
////

///
@import "../core/settings";

/// Convert to EMs function
/// @param {number} target
/// @param {number} context [base-font-size]
@function toem($target, $context: $msuif-font-size) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0em;
}

/// Convert to REMs function
/// @param {number} target
/// @param {number} context [base-font-size]
@function torem($target, $context: $msuif-font-size) {
   @if $target == 0 { @return 0 }
   @return $target / $context + 0rem;
}

/// Remove unit from value
/// @param {number} value
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

/// Recalculate responsive breakpoints
/// @param {number} breakpoint
/// @param {string} type 'up' | 'down'
@function bp-calculation($breakpoint, $type){
  @if($type == "up") {@return $breakpoint + 1;}
  @elseif($type == "down") {@return $breakpoint - 1;}
}

/// Lighten a color
/// @param {hexa} color
/// @param {number} percentage
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Darken a color ----- //
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/// Explode a string in a PHP fashion ----- //
@function explode($string,$dem) {
  $list: ();
  $sum: str-length($string);

  @for $i from 1 through $sum {
    $str: str-index($string,$dem);

    @if str-length($string) >= 1 and $str == null {
      $list: append($list,$string,comma);
      $string: '';
    }

    @if type-of($str) == number {
      $each: str-slice($string,0,($str - 1));
      $list: append($list,$each,comma);
      $string: str-slice($string,($str + 1), $sum);
    }
  }

  @if length($list) > 1 {
    @return '.' + nth($list, 2);
  }
  @else {
    @return nth($list, 1);
  }
}

/// Get values in a multidimentional map. Thanks to Hugo Giraudel ----- //
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);

}
